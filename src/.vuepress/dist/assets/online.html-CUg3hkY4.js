import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as d,f as n}from"./app-uJW8EvoO.js";const a={},i=n('<h2 id="_1-问题-怎么给线上表加字段" tabindex="-1"><a class="header-anchor" href="#_1-问题-怎么给线上表加字段"><span>1. 问题：怎么给线上表加字段？</span></a></h2><p>工作中最常遇到的问题，怎么给线上频繁使用的大表添加字段？ 比如：给下面的用户表（user）添加年龄（age）字段。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CREATE TABLE `user` (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,\n  `name` varchar(100) DEFAULT NULL COMMENT &#39;姓名&#39;,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB COMMENT=&#39;用户表&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有同学会说，这还不简单，直接加不加完了，用下面的命令：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ALTER TABLE `user` ADD `age` int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;年龄&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加完，再查看一下表结构：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CREATE TABLE `user` (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,\n  `name` varchar(100) DEFAULT NULL COMMENT &#39;姓名&#39;,\n  `age` int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;年龄&#39;,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB COMMENT=&#39;用户表&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这不是添加成功了吗？有什么呀！ 是的，线下数据库怎么整都行，但是如果在线上数据库这样操作，整个服务都有宕机的风险！自己也离毕业不远了。 不是危言耸听，我们找个case测试一下： <img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686489361799-be5ee556-be2b-4cc9-b609-3ab9637b26d9.png#averageHue=%23f6f3e6&amp;clientId=u04d010b7-2d98-4&amp;from=paste&amp;height=652&amp;id=u0d47ee66&amp;originHeight=652&amp;originWidth=1528&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=61171&amp;status=done&amp;style=none&amp;taskId=u06ec6b73-5263-4328-8fc8-ba0076e3748&amp;title=&amp;width=1528" alt="image-20220930113928755.png" loading="lazy"></p><ol><li>Session1启动了一个事务，没有提交。</li><li>Session2执行添加列的操作，被阻塞。</li><li>更严重的是，Session3执行简单查询的语句也被阻塞了。</li></ol><h2 id="_2-线上服务宕机的原因" tabindex="-1"><a class="header-anchor" href="#_2-线上服务宕机的原因"><span>2. 线上服务宕机的原因</span></a></h2><p>为什么会出现这种情况呢？ 原因是在执行查询语句的时候，MySQL自动加了<strong>MDL锁（metadata lock，即元数据锁）</strong>。 不行的话，我们可以再执行一下<strong>show processlist</strong>命令，查看有哪些正在执行的进程： <img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686489370419-9c34a3fd-0109-4b8a-be18-1ba378a6609e.png#averageHue=%23f3d8d5&amp;clientId=u04d010b7-2d98-4&amp;from=paste&amp;height=450&amp;id=u612e01b3&amp;originHeight=450&amp;originWidth=2508&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=292945&amp;status=done&amp;style=none&amp;taskId=ucf63f866-e42b-4d89-b744-a38f81125c4&amp;title=&amp;width=2508" alt="image-20220930115621212.png" loading="lazy"> 可以清楚的看到Session2和Session3的语句正在等待MDL锁，<strong>Waiting for table metadata lock</strong>。 <strong>MDL锁</strong>的作用是什么？ 为了保证并发操作下数据的一致性。 如果一个事务正在执行中，另一个在这时修改了表结构，不但可能导致当前事务出现不可重复读的问题，还有可能连事务都无法提交。 <strong>什么时候会加MDL锁？</strong> MDL锁是MySQL自动隐式加锁，无需我们手动操作。 在我们执行DDL语句的时候，MySQL自动添加MDL读锁。 在我们执行DML语句的时候，MySQL自动添加MDL写锁。 读锁与读锁之间不互斥，读锁与写锁、写锁与写锁之间互斥。 注意：MDL锁是表锁，会对整张表加锁。</p><p>普及额外的小知识点，什么是DML和DDL： <strong>DML（Data Manipulation Language）数据操纵语言：</strong> 适用范围：对表数据进行操作，比如 insert、delete、select、update等。 <strong>DDL（Data Definition Language）数据定义语言：</strong> 适用范围：对表结构进行操作，比如create、drop、alter、rename、truncate等。</p><h2 id="_3-如何优雅的给线上表加字段" tabindex="-1"><a class="header-anchor" href="#_3-如何优雅的给线上表加字段"><span>3. 如何优雅的给线上表加字段</span></a></h2><p>既然修改表结构的时候，MySQL会自动添加表锁，并且是写锁，会阻塞后续的所有读写请求，造成非常严重的后果。 还有没有办法能优雅的给线上表添加字段呢？ 当然有，从MySQL5.6版本开始增加了<strong>Online DDL</strong>，作用就是在执行DDL的时候，允许并发执行DML。简单翻译就是修改表结构的时候，也能同时支持并发执行增删查改操作。</p><p>从MySQL8.0版本开始又优化了<strong>Online DDL</strong>，支持快速添加列，可以实现给大表秒级加字段。 具体用法就是在DDL语句后面增加两个参数<strong>ALGORITHM</strong>和<strong>LOCK</strong>。 比如下面这样：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ALTER TABLE `user` ADD `age` int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;年龄&#39;, \nALGORITHM=Inplace, \nLOCK=NONE;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个参数分别是干嘛用的？有哪些选项呢？ <strong>ALGORITHM</strong>可以指定使用哪种算法执行DDL，可选项有：</p><ul><li>Copy： 拷贝方式，MySQL5.6 之前 DDL 的执行方式，过程就是先创建新表，修改新表结构，把旧表数据复制到新表，删除旧表，重命名新表。执行过程非常耗时，产生大量的磁盘IO和占用CPU，还有使Buffer poll失效，而且需要锁住旧表，性能较差，现在基本很少使用。</li><li>Inplace： 原地修改，MySQL5.6开始引入的，优点是不会在Server层发生表数据拷贝，过程中允许并发执行DML操作。过程就是先添加MDL写锁，执行初始化操作，然后降级为MDL读锁，执行DDL操作（比较耗时，允许并发执行DML操作），升级为MDL写锁，完成DDL操作。</li><li>Instant： 快速修改，MySQL8.0开始引入的，可以实现快速给大表添加字段。</li></ul><p>性能依次是，Instant &gt; Inplace &gt; Copy。 LOCK可以指定执行过程中，是否加锁，可选项有：</p><ul><li>NONE 不加锁，允许DML操作。</li><li>SHARED 加读锁，允许读操作，禁止DML操作。</li><li>DEFAULT 默认锁模式，在满足DDL操作前提下，默认锁模式会允许尽可能多的读操作和DML操作。</li><li>EXCLUSIVE 加写锁，禁止读操作和DML操作。</li></ul><p><strong>Online DDL</strong>并不是支持所有DDL操作，看一下到底支持哪些操作？</p><table><thead><tr><th><strong>操作</strong></th><th><strong>Instant</strong></th><th><strong>Inplace</strong></th><th><strong>Rebuilds Table</strong></th><th><strong>允许并发DML</strong></th><th><strong>仅修改元数据</strong></th></tr></thead><tbody><tr><td>添加列</td><td>Yes</td><td>Yes</td><td>No</td><td>Yes</td><td>No</td></tr><tr><td>删除列</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>重命名列</td><td>No</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>更改列顺序</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>设置列默认值</td><td>Yes</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>更改列数据类型</td><td>No</td><td>No</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td>设置VARCHAR列大小</td><td>No</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>删除列默认值</td><td>Yes</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>更改自动增量值</td><td>No</td><td>Yes</td><td>No</td><td>Yes</td><td>No</td></tr><tr><td>设置列为null</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>设置列not null</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr></tbody></table><p>像最常见的添加列就可以使用Instant，而像删除列、重命名列、更改列数据类型就只能使用Inplace了。</p>',23),s=[i];function r(o,l){return e(),d("div",null,s)}const g=t(a,[["render",r],["__file","online.html.vue"]]),m=JSON.parse('{"path":"/mysql/online.html","title":"","lang":"zh-CN","frontmatter":{"description":"1. 问题：怎么给线上表加字段？ 工作中最常遇到的问题，怎么给线上频繁使用的大表添加字段？ 比如：给下面的用户表（user）添加年龄（age）字段。 有同学会说，这还不简单，直接加不加完了，用下面的命令： 添加完，再查看一下表结构： 这不是添加成功了吗？有什么呀！ 是的，线下数据库怎么整都行，但是如果在线上数据库这样操作，整个服务都有宕机的风险！自己也...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/mysql/online.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"1. 问题：怎么给线上表加字段？ 工作中最常遇到的问题，怎么给线上频繁使用的大表添加字段？ 比如：给下面的用户表（user）添加年龄（age）字段。 有同学会说，这还不简单，直接加不加完了，用下面的命令： 添加完，再查看一下表结构： 这不是添加成功了吗？有什么呀！ 是的，线下数据库怎么整都行，但是如果在线上数据库这样操作，整个服务都有宕机的风险！自己也..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686489361799-be5ee556-be2b-4cc9-b609-3ab9637b26d9.png#averageHue=%23f6f3e6&clientId=u04d010b7-2d98-4&from=paste&height=652&id=u0d47ee66&originHeight=652&originWidth=1528&originalType=binary&ratio=1&rotation=0&showTitle=false&size=61171&status=done&style=none&taskId=u06ec6b73-5263-4328-8fc8-ba0076e3748&title=&width=1528"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686489361799-be5ee556-be2b-4cc9-b609-3ab9637b26d9.png#averageHue=%23f6f3e6&clientId=u04d010b7-2d98-4&from=paste&height=652&id=u0d47ee66&originHeight=652&originWidth=1528&originalType=binary&ratio=1&rotation=0&showTitle=false&size=61171&status=done&style=none&taskId=u06ec6b73-5263-4328-8fc8-ba0076e3748&title=&width=1528\\",\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686489370419-9c34a3fd-0109-4b8a-be18-1ba378a6609e.png#averageHue=%23f3d8d5&clientId=u04d010b7-2d98-4&from=paste&height=450&id=u612e01b3&originHeight=450&originWidth=2508&originalType=binary&ratio=1&rotation=0&showTitle=false&size=292945&status=done&style=none&taskId=ucf63f866-e42b-4d89-b744-a38f81125c4&title=&width=2508\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 问题：怎么给线上表加字段？","slug":"_1-问题-怎么给线上表加字段","link":"#_1-问题-怎么给线上表加字段","children":[]},{"level":2,"title":"2. 线上服务宕机的原因","slug":"_2-线上服务宕机的原因","link":"#_2-线上服务宕机的原因","children":[]},{"level":2,"title":"3. 如何优雅的给线上表加字段","slug":"_3-如何优雅的给线上表加字段","link":"#_3-如何优雅的给线上表加字段","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.95,"words":1485},"filePathRelative":"mysql/online.md","autoDesc":true}');export{g as comp,m as data};
