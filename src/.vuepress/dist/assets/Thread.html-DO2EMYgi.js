import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as t,f as p,a as n,b as a}from"./app-DBxnb9Z7.js";const l={},c=p(`<h2 id="_1-线程是什么" tabindex="-1"><a class="header-anchor" href="#_1-线程是什么"><span>1. 线程是什么</span></a></h2><p>操作系统支持多个应用程序并发执行，每个应用程序至少对应一个进程 ，彼此之间的操作和数据不受干扰，彼此通信一般采用管道通信、消息队列、共享内存等方式。当一个进程需要磁盘IO的时候，CPU就切换到另外的进程，提高了CPU利用率。</p><p>有了进程，为什么还要线程？因为进程的成本太高了。</p><p>启动新的进程必须分配独立的内存空间，建立数据表维护它的代码段、堆栈段和数据段，这是昂贵的多任务工作方式。线程可以看作轻量化的进程。线程之间使用相同的地址空间，切换线程的时间远小于切换进程的时间。</p><p>进程是资源分配的最小单位，而线程是CPU调度的最小单位。每一个进程中至少有一个线程，同一进程的所有线程共享该进程的所有资源，多个线程可以完成多个不同的任务，也就是我们常说的并发多线程。</p><h2 id="_2-怎样创建线程" tabindex="-1"><a class="header-anchor" href="#_2-怎样创建线程"><span>2. 怎样创建线程</span></a></h2><p>创建线程常用的有四种方式，分别是：</p><ol><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口</li><li>使用线程池创建</li></ol><p>分别看一下怎么具体怎么使用代码创建的？</p><h3 id="_2-1-继承thread类" tabindex="-1"><a class="header-anchor" href="#_2-1-继承thread类"><span>2.1 继承Thread类</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启动线程</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;关注公众号:一灯架构&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>关注公众号<span class="token operator">:</span>一灯架构
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>start方法用来启动线程，只能被调用一次。 run方法是线程的核心方法，业务逻辑都写在run方法中。</p><h3 id="_2-2-实现runnable接口" tabindex="-1"><a class="header-anchor" href="#_2-2-实现runnable接口"><span>2.2 实现Runnable接口</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">MyRunnable</span> myRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">,</span> <span class="token string">&quot;线程1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">,</span> <span class="token string">&quot;线程2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启动线程1</span>
        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启动线程2</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">+</span> <span class="token string">&quot;，关注公众号:一灯架构，&quot;</span> <span class="token operator">+</span> count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>线程<span class="token number">2</span>，关注公众号<span class="token operator">:</span>一灯架构，<span class="token number">4</span>
线程<span class="token number">1</span>，关注公众号<span class="token operator">:</span>一灯架构，<span class="token number">5</span>
线程<span class="token number">1</span>，关注公众号<span class="token operator">:</span>一灯架构，<span class="token number">2</span>
线程<span class="token number">1</span>，关注公众号<span class="token operator">:</span>一灯架构，<span class="token number">1</span>
线程<span class="token number">2</span>，关注公众号<span class="token operator">:</span>一灯架构，<span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要把Runnable实例放到Thread类中，才能执行，Thread对象才是真正的线程对象。</p><p>使用实现Runnable接口创建线程方式，相比继承Thread类创建线程，优点是：</p><ol><li>实现的方式没有类的单继承性的局限性</li><li>实现的方式更适合来处理多个线程有共享数据的情况</li></ol><h3 id="_2-3-实现callable接口" tabindex="-1"><a class="header-anchor" href="#_2-3-实现callable接口"><span>2.3 实现Callable接口</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyCallable</span> myCallable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>myCallable<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;关注公众号:一灯架构&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>关注公众号<span class="token operator">:</span>一灯架构
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实现Callable接口的线程实例对象，配合FutureTask使用，可以接收返回值。</p><h3 id="_2-4-使用线程池创建" tabindex="-1"><a class="header-anchor" href="#_2-4-使用线程池创建"><span>2.4 使用线程池创建</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;关注公众号:一灯架构&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>关注公众号<span class="token operator">:</span>一灯架构
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用线程池创建线程是工作开发中最常用的方式，优点是：</p><ol><li>线程池帮忙管理对象的创建与销毁，减轻开发者工作量</li><li>线程池帮忙管理任务的调用，资源的创建与分配</li><li>复用线程和对象，提高使用效率</li></ol><h2 id="_3-线程的状态" tabindex="-1"><a class="header-anchor" href="#_3-线程的状态"><span>3. 线程的状态</span></a></h2><p>线程共有6种状态，分别是NEW（初始化）、RUNNABLE（可运行）、WAITING（等待）、TIMED_WAITING（超时等待）、BLOCKED（阻塞）、TERMINATED（终止）。 <img src="https://javabaguwen.com/img/Thread1.png" alt="image.png" loading="lazy"></p><ul><li>NEW（初始化） 表示创建线程对象之后，还没有调用start方法。</li><li>RUNNABLE（可运行） 表示调用start方法之后，等待CPU调度。为了便于理解，通常又把RUNNABLE分别RUNNING（运行中）和READY（就绪）。处在RUNNING（运行中）状态的线程可以调用yield方法，让出CPU时间片，然后跟其他处于READY（就绪）一起等待被调度。</li><li>WAITING（等待） 处于RUNNABLE状态的线程调用wait方法之后，就处于等待状态，需要其他线程显示地唤醒。</li><li>TIMED_WAITING（超时等待） 处于RUNNABLE状态的线程调用wait(long)方法之后，就处于等待状态，需要其他线程显示地唤醒。</li><li>BLOCKED（阻塞） 等待进入synchronized方法/代码块，处于阻塞状态。</li><li>TERMINATED（终止） 表示线程已经执行结束。</li></ul><h2 id="_4-线程常用方法" tabindex="-1"><a class="header-anchor" href="#_4-线程常用方法"><span>4. 线程常用方法</span></a></h2><p>说一下线程有哪些常用的方法。</p>`,37),o=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"方法定义"),n("th",null,"含义"),n("th",null,"使用方式")])]),n("tbody",null,[n("tr",null,[n("td",{"……":""},"public synchronized void start()"),n("td",null,"启动线程"),n("td",null,[a("MyThread myThread = new MyThread(); "),n("br"),a("myThread.start();")])]),n("tr",null,[n("td",null,"public static native Thread currentThread();"),n("td",null,"获取当前线程实例对象"),n("td",null,"Thread thread = Thread.currentThread();")]),n("tr",null,[n("td",null,"public static native void yield();"),n("td",null,"让出CPU时间片"),n("td",null,"Thread.yield();")]),n("tr",null,[n("td",null,"public static native void sleep(long millis);"),n("td",null,"睡眠指定时间"),n("td",null,"Thread.sleep(1L);")]),n("tr",null,[n("td",{"……":""},"public void interrupt()"),n("td",null,"中断线程"),n("td",null,[a("MyThread myThread = new MyThread();"),n("br"),a("myThread.interrupt();")])]),n("tr",null,[n("td",{"……":""},"public static boolean interrupted()"),n("td",null,"判断线程是否已中断"),n("td",null,[a("MyThread myThread = new MyThread(); "),n("br"),a("boolean interrupted = myThread.isInterrupted();")])]),n("tr",null,[n("td",null,"public final native boolean isAlive();"),n("td",null,"判断线程是否是存活状态"),n("td",null,[a("MyThread myThread = new MyThread(); "),n("br"),a("boolean alive = myThread.isAlive();")])]),n("tr",null,[n("td",{"……":""},"public final String getName()"),n("td",null,"获取线程名称"),n("td",null,[a("MyThread myThread = new MyThread(); "),n("br"),a("String name = myThread.getName();")])]),n("tr",null,[n("td",{"……":""},"public State getState()"),n("td",null,"获取线程状态"),n("td",null,[a("MyThread myThread = new MyThread(); "),n("br"),a("Thread.State state = myThread.getState();")])]),n("tr",null,[n("td",{"……":""},"public long getId()"),n("td",null,"获取线程ID"),n("td",null,[a("MyThread myThread = new MyThread(); "),n("br"),a("long id = myThread.getId();")])]),n("tr",null,[n("td",{"……":""},"public final void join()"),n("td",null,"等待其他线程执行完再执行"),n("td",null,[a("MyThread myThread = new MyThread();"),n("br"),a("myThread.join();")])])])],-1),i=[c,o];function u(r,d){return e(),t("div",null,i)}const v=s(l,[["render",u],["__file","Thread.html.vue"]]),h=JSON.parse('{"path":"/concurrency/Thread.html","title":"","lang":"zh-CN","frontmatter":{"description":"1. 线程是什么 操作系统支持多个应用程序并发执行，每个应用程序至少对应一个进程 ，彼此之间的操作和数据不受干扰，彼此通信一般采用管道通信、消息队列、共享内存等方式。当一个进程需要磁盘IO的时候，CPU就切换到另外的进程，提高了CPU利用率。 有了进程，为什么还要线程？因为进程的成本太高了。 启动新的进程必须分配独立的内存空间，建立数据表维护它的代码段...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/concurrency/Thread.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"1. 线程是什么 操作系统支持多个应用程序并发执行，每个应用程序至少对应一个进程 ，彼此之间的操作和数据不受干扰，彼此通信一般采用管道通信、消息队列、共享内存等方式。当一个进程需要磁盘IO的时候，CPU就切换到另外的进程，提高了CPU利用率。 有了进程，为什么还要线程？因为进程的成本太高了。 启动新的进程必须分配独立的内存空间，建立数据表维护它的代码段..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javabaguwen.com/img/Thread1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-25T05:50:45.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2024-05-25T05:50:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://javabaguwen.com/img/Thread1.png\\"],\\"dateModified\\":\\"2024-05-25T05:50:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 线程是什么","slug":"_1-线程是什么","link":"#_1-线程是什么","children":[]},{"level":2,"title":"2. 怎样创建线程","slug":"_2-怎样创建线程","link":"#_2-怎样创建线程","children":[{"level":3,"title":"2.1 继承Thread类","slug":"_2-1-继承thread类","link":"#_2-1-继承thread类","children":[]},{"level":3,"title":"2.2 实现Runnable接口","slug":"_2-2-实现runnable接口","link":"#_2-2-实现runnable接口","children":[]},{"level":3,"title":"2.3 实现Callable接口","slug":"_2-3-实现callable接口","link":"#_2-3-实现callable接口","children":[]},{"level":3,"title":"2.4 使用线程池创建","slug":"_2-4-使用线程池创建","link":"#_2-4-使用线程池创建","children":[]}]},{"level":2,"title":"3. 线程的状态","slug":"_3-线程的状态","link":"#_3-线程的状态","children":[]},{"level":2,"title":"4. 线程常用方法","slug":"_4-线程常用方法","link":"#_4-线程常用方法","children":[]}],"git":{"createdTime":1716616245000,"updatedTime":1716616245000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":1}]},"readingTime":{"minutes":4.69,"words":1407},"filePathRelative":"concurrency/Thread.md","localizedDate":"2024年5月25日","autoDesc":true}');export{v as comp,h as data};
