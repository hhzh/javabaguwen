import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,f as e}from"./app-uJW8EvoO.js";const t={},p=e(`<p>开发经常遇到分页查询的需求，但是当翻页过多的时候，就会产生深分页，导致查询效率急剧下降。 有没有什么办法，能解决深分页的问题呢？ 本文总结了三种优化方案，查询效率直接提升10倍，一起学习一下。</p><h2 id="_1-准备数据" tabindex="-1"><a class="header-anchor" href="#_1-准备数据"><span>1. 准备数据</span></a></h2><p>先创建一张用户表，只在create_time字段上加索引：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>create_time<span class="token punctuation">\`</span></span> <span class="token keyword">timestamp</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_create_time<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>create_time<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;用户表&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后往用户表中插入100万条测试数据，这里可以使用存储过程：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> insertData<span class="token punctuation">;</span>
<span class="token keyword">DELIMITER</span> $$
<span class="token keyword">create</span> <span class="token keyword">procedure</span> insertData<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
 <span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100000</span> <span class="token keyword">do</span>
         <span class="token keyword">INSERT</span> <span class="token keyword">into</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">set</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> 
   <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span> 
<span class="token keyword">end</span> $$

<span class="token keyword">call</span> insertData<span class="token punctuation">(</span><span class="token punctuation">)</span> $$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-验证深分页问题" tabindex="-1"><a class="header-anchor" href="#_2-验证深分页问题"><span>2. 验证深分页问题</span></a></h2><p>每页10条，当我们查询第一页的时候，速度很快：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> 
<span class="token keyword">where</span> create_time<span class="token operator">&gt;</span><span class="token string">&#39;2022-07-03&#39;</span> 
<span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487903976-10b75fe8-ded2-4868-9d29-4308b4ff6b8e.png#averageHue=%23f1efef&amp;clientId=ud08f7ad0-156c-4&amp;from=paste&amp;height=247&amp;id=u254e3025&amp;originHeight=247&amp;originWidth=498&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18292&amp;status=done&amp;style=none&amp;taskId=ubf3601d4-5cdc-47f1-b5dd-04bdd751d55&amp;title=&amp;width=498" alt="image-20220703181532231.png" loading="lazy"> 在不到0.01秒内直接返回了，所以没显示出执行时间。 当我们翻到第10000页的时候，查询效率急剧下降：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> 
<span class="token keyword">where</span> create_time<span class="token operator">&gt;</span><span class="token string">&#39;2022-07-03&#39;</span> 
<span class="token keyword">limit</span> <span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487911183-735133b2-5fa4-4c8b-ba90-711af8aac209.png#averageHue=%23ecebeb&amp;clientId=ud08f7ad0-156c-4&amp;from=paste&amp;height=241&amp;id=u64ab011f&amp;originHeight=241&amp;originWidth=522&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18166&amp;status=done&amp;style=none&amp;taskId=ub1748546-8b9b-4677-8a9a-b67624abcb2&amp;title=&amp;width=522" alt="image-20220703181904656.png" loading="lazy"> 执行时间变成了0.16秒，性能至少下降了几十倍。 耗时主要花在哪里了？</p><ol><li>需要扫描前10条数据，数据量较大，比较耗时</li><li>create_time是非聚簇索引，需要先查询出主键ID，再回表查询，通过主键ID查询出所有字段</li></ol><p>画一下回表查询流程： <strong>1. 先通过create_time查询出主键ID</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487918708-e0f76e40-f3a8-495a-8f0f-834f6ab37190.png#averageHue=%23f8f8f8&amp;clientId=ud08f7ad0-156c-4&amp;from=paste&amp;height=424&amp;id=u0f4b2b06&amp;originHeight=424&amp;originWidth=1576&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63308&amp;status=done&amp;style=none&amp;taskId=u199602b8-5e75-460f-94ea-784caf9d61f&amp;title=&amp;width=1576" alt="image-20220703204919992.png" loading="lazy"><strong>2. 再通过主键ID查询出表中所有字段</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487928957-8b39d5a8-e9be-48ca-8268-3be9cddf8a35.png#averageHue=%23f8f8f8&amp;clientId=ud08f7ad0-156c-4&amp;from=paste&amp;height=426&amp;id=u35da7906&amp;originHeight=426&amp;originWidth=1577&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=67054&amp;status=done&amp;style=none&amp;taskId=u49c723f8-02e7-4cde-b1c3-fe618f4082e&amp;title=&amp;width=1577" alt="image-20220703205108719.png" loading="lazy"> 别问为什么B+树的结构是这样的？问就是规定。 可以看一下前两篇文章。</p><h2 id="_3-优化查询" tabindex="-1"><a class="header-anchor" href="#_3-优化查询"><span>3. 优化查询</span></a></h2><h3 id="_3-1-使用子查询" tabindex="-1"><a class="header-anchor" href="#_3-1-使用子查询"><span>3.1 使用子查询</span></a></h3><p>先用子查询查出符合条件的主键，再用主键ID做条件查出所有字段。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> 
<span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span>
  <span class="token keyword">select</span> id <span class="token keyword">from</span> <span class="token keyword">user</span> 
  <span class="token keyword">where</span> create_time<span class="token operator">&gt;</span><span class="token string">&#39;2022-07-03&#39;</span> 
  <span class="token keyword">limit</span> <span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">10</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过这样查询会报错，说是子查询中不支持使用limit。 <img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487940404-18d30c74-a1b9-43c9-a84c-2bc0afc048ab.png#averageHue=%23eedede&amp;clientId=ud08f7ad0-156c-4&amp;from=paste&amp;height=79&amp;id=u4aeb29c3&amp;originHeight=79&amp;originWidth=697&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11818&amp;status=done&amp;style=none&amp;taskId=ub5d8006a-54c7-4ae8-aa62-c5cdb883e0e&amp;title=&amp;width=697" alt="image-20220703205602830.png" loading="lazy"> 我们加一层子查询嵌套，就可以了：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> 
<span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span>
 <span class="token keyword">select</span> id <span class="token keyword">from</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> id <span class="token keyword">from</span> <span class="token keyword">user</span> 
    <span class="token keyword">where</span> create_time<span class="token operator">&gt;</span><span class="token string">&#39;2022-07-03&#39;</span> 
    <span class="token keyword">limit</span> <span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">10</span>
 <span class="token punctuation">)</span> <span class="token keyword">as</span> t
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487952745-f66ebcde-0d5d-41f9-842e-d53972f3483e.png#averageHue=%23f4f3f3&amp;clientId=ud08f7ad0-156c-4&amp;from=paste&amp;height=248&amp;id=ue445ed8f&amp;originHeight=248&amp;originWidth=963&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32127&amp;status=done&amp;style=none&amp;taskId=u52b40e2f-5d36-40e5-a996-9963cc99577&amp;title=&amp;width=963" alt="image-20220703205912970.png" loading="lazy"> 执行时间缩短到0.05秒，减少了0.12秒，相当于查询性能提升了3倍。 为什么先用子查询查出符合条件的主键ID，就能缩短查询时间呢？ 我们用explain查看一下执行计划就明白了：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> 
<span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span>
 <span class="token keyword">select</span> id <span class="token keyword">from</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> id <span class="token keyword">from</span> <span class="token keyword">user</span> 
    <span class="token keyword">where</span> create_time<span class="token operator">&gt;</span><span class="token string">&#39;2022-07-03&#39;</span> 
    <span class="token keyword">limit</span> <span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">10</span>
 <span class="token punctuation">)</span> <span class="token keyword">as</span> t
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487963996-1a63dfbf-26d9-4373-af55-d70898400d33.png#averageHue=%23f1f0f0&amp;clientId=ud08f7ad0-156c-4&amp;from=paste&amp;height=185&amp;id=u415f2e3d&amp;originHeight=185&amp;originWidth=1209&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=30245&amp;status=done&amp;style=none&amp;taskId=ua43d3440-83be-431e-830d-7de72b89402&amp;title=&amp;width=1209" alt="image-20220703215830336.png" loading="lazy"> 可以看到Extra列显示子查询中用到<strong>Using index</strong>，表示用到了<strong>覆盖索引</strong>，所以子查询无需回表查询，加快了查询效率。</p><h3 id="_3-2-使用inner-join关联查询" tabindex="-1"><a class="header-anchor" href="#_3-2-使用inner-join关联查询"><span>3.2 使用inner join关联查询</span></a></h3><p>把子查询的结果当成一张临时表，然后和原表进行关联查询。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> 
<span class="token keyword">inner</span> <span class="token keyword">join</span> <span class="token punctuation">(</span>
   <span class="token keyword">select</span> id <span class="token keyword">from</span> <span class="token keyword">user</span> 
    <span class="token keyword">where</span> create_time<span class="token operator">&gt;</span><span class="token string">&#39;2022-07-03&#39;</span> 
    <span class="token keyword">limit</span> <span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">10</span>
<span class="token punctuation">)</span> <span class="token keyword">as</span> t <span class="token keyword">on</span> <span class="token keyword">user</span><span class="token punctuation">.</span>id<span class="token operator">=</span>t<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487974652-ff3957ce-6739-469b-a70a-3b2c25f18f10.png#averageHue=%23f2f1f1&amp;clientId=ud08f7ad0-156c-4&amp;from=paste&amp;height=245&amp;id=u16ff352a&amp;originHeight=245&amp;originWidth=938&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33516&amp;status=done&amp;style=none&amp;taskId=u37641f85-d973-47f6-8661-da57530ffcc&amp;title=&amp;width=938" alt="image-20220703220449618.png" loading="lazy"> 查询性能跟使用子查询一样。</p><h3 id="_3-3-使用分页游标-推荐" tabindex="-1"><a class="header-anchor" href="#_3-3-使用分页游标-推荐"><span>3.3 使用分页游标（推荐）</span></a></h3><p>实现方式就是：当我们查询第二页的时候，把第一页的查询结果放到第二页的查询条件中。 例如：首先查询第一页</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> 
<span class="token keyword">where</span> create_time<span class="token operator">&gt;</span><span class="token string">&#39;2022-07-03&#39;</span> 
<span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后查询第二页，把第一页的查询结果放到第二页查询条件中：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> 
<span class="token keyword">where</span> create_time<span class="token operator">&gt;</span><span class="token string">&#39;2022-07-03&#39;</span> <span class="token operator">and</span> id<span class="token operator">&gt;</span><span class="token number">10</span> 
<span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样相当于每次都是查询第一页，也就不存在深分页的问题了，推荐使用。 <img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686488006669-b474eb34-bdfa-4795-b74e-e3c4141358c8.png#averageHue=%23edecec&amp;clientId=ud08f7ad0-156c-4&amp;from=paste&amp;height=243&amp;id=u81143e2c&amp;originHeight=243&amp;originWidth=580&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19126&amp;status=done&amp;style=none&amp;taskId=u58ce620d-9867-4ba6-89a2-cda8bb6af13&amp;title=&amp;width=580" alt="image-20220703222259556.png" loading="lazy"> 执行耗时是0秒，查询性能直接提升了几十倍。 这样的查询方式虽然好用，但是又带来一个问题，就是无法跳转到指定页数，只能一页页向下翻。 所以这种查询只适合特定场景，比如资讯类APP的首页。 互联网APP一般采用瀑布流的形式，比如百度首页、头条首页，都是一直向下滑动翻页，并没有跳转到制定页数的需求。 不信的话，可以看一下，这是头条的瀑布流： <img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686488015321-0f1f3d0e-f95a-42e5-a2d4-8579b55471cd.png#averageHue=%2327282b&amp;clientId=ud08f7ad0-156c-4&amp;from=paste&amp;height=230&amp;id=u6d2ba4e7&amp;originHeight=230&amp;originWidth=626&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=40491&amp;status=done&amp;style=none&amp;taskId=u36d6fcb4-0c76-4037-8645-6b5b2acb96e&amp;title=&amp;width=626" alt="image-20220703221836032.png" loading="lazy"></p><p>传参中带了上一页的查询结果。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686488023917-cc37a536-3081-4a1e-90d3-544bd7cac418.png#averageHue=%2326292d&amp;clientId=ud08f7ad0-156c-4&amp;from=paste&amp;height=173&amp;id=u25d3aec2&amp;originHeight=173&amp;originWidth=492&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28159&amp;status=done&amp;style=none&amp;taskId=udd905091-0733-42d6-8396-5082077dd5b&amp;title=&amp;width=492" alt="image-20220703222026194.png" tabindex="0" loading="lazy"><figcaption>image-20220703222026194.png</figcaption></figure><p>响应数据中，返回了下一页查询条件。 所以这种查询方式的应用场景还是挺广的，赶快用起来吧。</p><h2 id="知识点总结" tabindex="-1"><a class="header-anchor" href="#知识点总结"><span>知识点总结：</span></a></h2><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686488032451-b068576d-7777-4000-82b1-d1ad3254d23b.png#averageHue=%23f9f9f9&amp;clientId=ud08f7ad0-156c-4&amp;from=paste&amp;height=370&amp;id=ufa1abc0a&amp;originHeight=370&amp;originWidth=1031&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66751&amp;status=done&amp;style=none&amp;taskId=ua01dc431-500f-4153-9e58-0244306f87c&amp;title=&amp;width=1031" alt="image-20220703223109687.png" tabindex="0" loading="lazy"><figcaption>image-20220703223109687.png</figcaption></figure>`,40),i=[p];function o(l,d){return n(),s("div",null,i)}const u=a(t,[["render",o],["__file","page.html.vue"]]),m=JSON.parse('{"path":"/mysql/page.html","title":"","lang":"zh-CN","frontmatter":{"description":"开发经常遇到分页查询的需求，但是当翻页过多的时候，就会产生深分页，导致查询效率急剧下降。 有没有什么办法，能解决深分页的问题呢？ 本文总结了三种优化方案，查询效率直接提升10倍，一起学习一下。 1. 准备数据 先创建一张用户表，只在create_time字段上加索引： 然后往用户表中插入100万条测试数据，这里可以使用存储过程： 2. 验证深分页问题 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/mysql/page.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"开发经常遇到分页查询的需求，但是当翻页过多的时候，就会产生深分页，导致查询效率急剧下降。 有没有什么办法，能解决深分页的问题呢？ 本文总结了三种优化方案，查询效率直接提升10倍，一起学习一下。 1. 准备数据 先创建一张用户表，只在create_time字段上加索引： 然后往用户表中插入100万条测试数据，这里可以使用存储过程： 2. 验证深分页问题 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487903976-10b75fe8-ded2-4868-9d29-4308b4ff6b8e.png#averageHue=%23f1efef&clientId=ud08f7ad0-156c-4&from=paste&height=247&id=u254e3025&originHeight=247&originWidth=498&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18292&status=done&style=none&taskId=ubf3601d4-5cdc-47f1-b5dd-04bdd751d55&title=&width=498"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487903976-10b75fe8-ded2-4868-9d29-4308b4ff6b8e.png#averageHue=%23f1efef&clientId=ud08f7ad0-156c-4&from=paste&height=247&id=u254e3025&originHeight=247&originWidth=498&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18292&status=done&style=none&taskId=ubf3601d4-5cdc-47f1-b5dd-04bdd751d55&title=&width=498\\",\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487911183-735133b2-5fa4-4c8b-ba90-711af8aac209.png#averageHue=%23ecebeb&clientId=ud08f7ad0-156c-4&from=paste&height=241&id=u64ab011f&originHeight=241&originWidth=522&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18166&status=done&style=none&taskId=ub1748546-8b9b-4677-8a9a-b67624abcb2&title=&width=522\\",\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487918708-e0f76e40-f3a8-495a-8f0f-834f6ab37190.png#averageHue=%23f8f8f8&clientId=ud08f7ad0-156c-4&from=paste&height=424&id=u0f4b2b06&originHeight=424&originWidth=1576&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63308&status=done&style=none&taskId=u199602b8-5e75-460f-94ea-784caf9d61f&title=&width=1576\\",\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487928957-8b39d5a8-e9be-48ca-8268-3be9cddf8a35.png#averageHue=%23f8f8f8&clientId=ud08f7ad0-156c-4&from=paste&height=426&id=u35da7906&originHeight=426&originWidth=1577&originalType=binary&ratio=1&rotation=0&showTitle=false&size=67054&status=done&style=none&taskId=u49c723f8-02e7-4cde-b1c3-fe618f4082e&title=&width=1577\\",\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487940404-18d30c74-a1b9-43c9-a84c-2bc0afc048ab.png#averageHue=%23eedede&clientId=ud08f7ad0-156c-4&from=paste&height=79&id=u4aeb29c3&originHeight=79&originWidth=697&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11818&status=done&style=none&taskId=ub5d8006a-54c7-4ae8-aa62-c5cdb883e0e&title=&width=697\\",\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487952745-f66ebcde-0d5d-41f9-842e-d53972f3483e.png#averageHue=%23f4f3f3&clientId=ud08f7ad0-156c-4&from=paste&height=248&id=ue445ed8f&originHeight=248&originWidth=963&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32127&status=done&style=none&taskId=u52b40e2f-5d36-40e5-a996-9963cc99577&title=&width=963\\",\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487963996-1a63dfbf-26d9-4373-af55-d70898400d33.png#averageHue=%23f1f0f0&clientId=ud08f7ad0-156c-4&from=paste&height=185&id=u415f2e3d&originHeight=185&originWidth=1209&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30245&status=done&style=none&taskId=ua43d3440-83be-431e-830d-7de72b89402&title=&width=1209\\",\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487974652-ff3957ce-6739-469b-a70a-3b2c25f18f10.png#averageHue=%23f2f1f1&clientId=ud08f7ad0-156c-4&from=paste&height=245&id=u16ff352a&originHeight=245&originWidth=938&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33516&status=done&style=none&taskId=u37641f85-d973-47f6-8661-da57530ffcc&title=&width=938\\",\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686488006669-b474eb34-bdfa-4795-b74e-e3c4141358c8.png#averageHue=%23edecec&clientId=ud08f7ad0-156c-4&from=paste&height=243&id=u81143e2c&originHeight=243&originWidth=580&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19126&status=done&style=none&taskId=u58ce620d-9867-4ba6-89a2-cda8bb6af13&title=&width=580\\",\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686488015321-0f1f3d0e-f95a-42e5-a2d4-8579b55471cd.png#averageHue=%2327282b&clientId=ud08f7ad0-156c-4&from=paste&height=230&id=u6d2ba4e7&originHeight=230&originWidth=626&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40491&status=done&style=none&taskId=u36d6fcb4-0c76-4037-8645-6b5b2acb96e&title=&width=626\\",\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686488023917-cc37a536-3081-4a1e-90d3-544bd7cac418.png#averageHue=%2326292d&clientId=ud08f7ad0-156c-4&from=paste&height=173&id=u25d3aec2&originHeight=173&originWidth=492&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28159&status=done&style=none&taskId=udd905091-0733-42d6-8396-5082077dd5b&title=&width=492\\",\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686488032451-b068576d-7777-4000-82b1-d1ad3254d23b.png#averageHue=%23f9f9f9&clientId=ud08f7ad0-156c-4&from=paste&height=370&id=ufa1abc0a&originHeight=370&originWidth=1031&originalType=binary&ratio=1&rotation=0&showTitle=false&size=66751&status=done&style=none&taskId=ua01dc431-500f-4153-9e58-0244306f87c&title=&width=1031\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 准备数据","slug":"_1-准备数据","link":"#_1-准备数据","children":[]},{"level":2,"title":"2. 验证深分页问题","slug":"_2-验证深分页问题","link":"#_2-验证深分页问题","children":[]},{"level":2,"title":"3. 优化查询","slug":"_3-优化查询","link":"#_3-优化查询","children":[{"level":3,"title":"3.1 使用子查询","slug":"_3-1-使用子查询","link":"#_3-1-使用子查询","children":[]},{"level":3,"title":"3.2 使用inner join关联查询","slug":"_3-2-使用inner-join关联查询","link":"#_3-2-使用inner-join关联查询","children":[]},{"level":3,"title":"3.3 使用分页游标（推荐）","slug":"_3-3-使用分页游标-推荐","link":"#_3-3-使用分页游标-推荐","children":[]}]},{"level":2,"title":"知识点总结：","slug":"知识点总结","link":"#知识点总结","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.62,"words":1686},"filePathRelative":"mysql/page.md","autoDesc":true}');export{u as comp,m as data};
