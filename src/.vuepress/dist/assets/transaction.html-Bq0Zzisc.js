import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,f as i}from"./app-uJW8EvoO.js";const o={},n=i('<h1 id="事务四大特性" tabindex="-1"><a class="header-anchor" href="#事务四大特性"><span>事务四大特性</span></a></h1><p>事务有四大特性，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），简称ACID。</p><ul><li>原子性是指事务中所有操作要么全部成功，要么全部失败。</li><li>一致性是指事务执行前后，数据始终处于一致性状态，不会出现数据丢失。</li><li>隔离性是指事务提交前的中间状态对其他事务不可见，即相互隔离。</li><li>持久性是指事务提交后，数据的修改永久保存在数据库中。</li></ul><h1 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理"><span>实现原理</span></a></h1><h2 id="原子性" tabindex="-1"><a class="header-anchor" href="#原子性"><span>原子性</span></a></h2><p>原子性是undo log实现的，一致性是由代码逻辑层面保证的，隔离性是由mvcc实现的，持久性是基于redo log实现的。 <strong>Redo Log（重做日志）：</strong> Redo Log记录的是物理日志，也就是磁盘数据的修改。 用来保证服务崩溃后，仍能把事务中变更的数据持久化到磁盘上。 如果没有Redo Log的话，会发生什么？ 修改数据的过程就变成这样了：</p><ol><li>从磁盘加载数据到内存</li><li>在内存中修改数据</li><li>把新数据持久化到磁盘</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/12651402/1710829070500-a961c121-3f86-4d34-a017-1b3c53e5f7df.png#averageHue=%23f4f4f4&amp;clientId=u0415d217-3cb3-4&amp;from=paste&amp;height=680&amp;id=u217b9fe6&amp;originHeight=680&amp;originWidth=896&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=138407&amp;status=done&amp;style=none&amp;taskId=ud351da9c-0c05-4456-aa34-4236741299a&amp;title=&amp;width=896" alt="image.png" loading="lazy"> 这样做，会有严重的性能问题。</p><ol><li>InnoDB在磁盘中存储的基本单元是页，可能本次修改只变更一页中几个字节，但是需要刷新整页的数据，就很浪费资源。</li><li>一个事务可能修改了多页中的数据，页之间又是不连续的，就会产生随机IO，性能更差。</li></ol><p>所以为了提高写入性能，于是就引入了Redo Log。</p><p>看一下引入Redo Log后修改流程：</p><ol><li>从磁盘加载数据到内存</li><li>在内存中修改数据</li><li>把新数据写到<strong>Redo Log Buffer</strong>中</li><li>把<strong>Redo Log Buffer</strong>中数据持久化到<strong>Redo Log</strong>文件中</li><li>把<strong>Redo Log</strong>文件中数据持久化到数据库磁盘中</li></ol><figure><img src="https://cdn.nlark.com/yuque/0/2024/png/12651402/1710829097732-66d4972b-d1aa-4836-a107-fb5af1a44b5f.png#averageHue=%23c4d8c1&amp;clientId=u0415d217-3cb3-4&amp;from=paste&amp;height=966&amp;id=u1a3bab53&amp;originHeight=966&amp;originWidth=1004&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=264123&amp;status=done&amp;style=none&amp;taskId=u0dbcf09b-db53-4dee-b029-ea645666836&amp;title=&amp;width=1004" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p><strong>Undo Log（回滚日志）：</strong> Undo Log记录的是逻辑日志，用来回滚事务时，恢复到修改前的数据。 比如：当我们执行一条insert语句时，Undo Log就记录一条相反的delete语句。 加入Undo Log之后的修改流程就是这样的： <img src="https://cdn.nlark.com/yuque/0/2024/png/12651402/1710829112236-d69dce66-301c-470b-b912-6bcdb0c267d0.png#averageHue=%23c6dbc3&amp;clientId=u0415d217-3cb3-4&amp;from=paste&amp;height=929&amp;id=u79e664e9&amp;originHeight=929&amp;originWidth=1500&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=377553&amp;status=done&amp;style=none&amp;taskId=ue07b6b39-c90a-4858-bc4a-bbb7f404faf&amp;title=&amp;width=1500" alt="image.png" loading="lazy"><strong>MVCC（多版本并发控制，Multi-Version Concurrency Control）：</strong></p><p>记录的是某个时间点上的数据快照，用来实现不同事务之间数据的隔离性。 提到隔离性，一定要说一下事务的隔离级别。</p><p>说事务隔离级别之前，必须要先说一下并发事务产生的问题： <strong>脏读：</strong> 一个事务读到其他事务未提交的数据。 <strong>不可重复读：</strong> 多次读取相同的数据，得到的结果集不一致，即读到其他事务提交后的数据。 <strong>幻读：</strong> 相同的查询条件，多次读取的结果不一致，即读到其他事务提交后的数据。 <strong>不可重复读与幻读的区别是：</strong> 不可重复读是读到了其他事务执行update、delete后的数据，而幻读是读到其他事务执行insert后的数据。</p><p><strong>隔离级别</strong><strong>Read UnCommitted（读未提交）：</strong> 读到其他事务未提交的数据，会出现脏读、不可重复读、幻读。 <strong>Read Committed（读已提交）：</strong> 读到其他事务已提交的数据，解决了脏读，会出现不可重复读、幻读。 <strong>Repeatable Read（可重复读）：</strong> 相同的数据，多次读取到的结果集一致。解决了不可重复读，还是会出现幻读。 <strong>Serializable（串行化）：</strong> 所有事务串行执行，解决了幻读。</p><p>再谈MVCC： MVCC解决了读写冲突，实现了并发读写，提升了事务的性能。</p><p>由于Read UnCommitted隔离级别下，每次都读取最新的数据。而Serializable隔离级别下，对所有读取数据都加锁。这两种隔离级不需要MVCC，所以MVCC只在Read Committed和Repeatable Read两种隔离级别下起作用。</p><p>MVCC的实现方式通过两个隐藏列trx_id（最近一次提交事务的ID）和roll_pointer（上个版本的地址），建立一个版本链。并在事务中读取的时候生成一个ReadView（读视图），在Read Committed隔离级别下，每次读取都会生成一个读视图，而在Repeatable Read隔离级别下，只会在第一次读取时生成一个读视图。 <img src="https://cdn.nlark.com/yuque/0/2024/png/12651402/1710829136244-cdf7e59b-dd75-4955-ab3f-5a7fcc9cec88.png#averageHue=%23f4f4f4&amp;clientId=u0415d217-3cb3-4&amp;from=paste&amp;height=684&amp;id=ubc6005d1&amp;originHeight=684&amp;originWidth=1326&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=192971&amp;status=done&amp;style=none&amp;taskId=uaf7668c5-88e2-40ee-b65b-cc2df1e1a59&amp;title=&amp;width=1326" alt="image.png" loading="lazy"></p><p>InnoDB如何解决幻读的？ 先普及一下快照读和当前读。</p><p><strong>当前读：</strong> 读取数据的最新版本，并对数据进行加锁。 例如：insert、update、delete、select for update</p><p><strong>快照读：</strong> 读取数据的历史版本，不对数据加锁。 例如：select 在当前读的情况下，是通过加锁来解决幻读。 在快照读的情况下，是通过MVCC来解决幻读。</p><h3 id="本文知识点总结" tabindex="-1"><a class="header-anchor" href="#本文知识点总结"><span><strong>本文知识点总结：</strong></span></a></h3><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487103636-474ddadf-21cd-4a5c-85b3-4ebae0c82e35.png#averageHue=%23eaeaea&amp;clientId=u475ec09f-2153-4&amp;from=paste&amp;height=2492&amp;id=u07f4eabc&amp;originHeight=2492&amp;originWidth=2780&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1248218&amp;status=done&amp;style=none&amp;taskId=u167dd146-b556-4a6c-8a27-bdec3ff74d5&amp;title=&amp;width=2780" alt="iShot2022-05-16 16.58.56.png" tabindex="0" loading="lazy"><figcaption>iShot2022-05-16 16.58.56.png</figcaption></figure>',25),r=[n];function p(d,s){return a(),t("div",null,r)}const g=e(o,[["render",p],["__file","transaction.html.vue"]]),m=JSON.parse('{"path":"/mysql/transaction.html","title":"事务四大特性","lang":"zh-CN","frontmatter":{"description":"事务四大特性 事务有四大特性，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），简称ACID。 原子性是指事务中所有操作要么全部成功，要么全部失败。 一致性是指事务执行前后，数据始终处于一致性状态，不会出现数据丢失。 隔离性是指事务提交前的中间状态对其他事务不可见，即相互...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/mysql/transaction.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:title","content":"事务四大特性"}],["meta",{"property":"og:description","content":"事务四大特性 事务有四大特性，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），简称ACID。 原子性是指事务中所有操作要么全部成功，要么全部失败。 一致性是指事务执行前后，数据始终处于一致性状态，不会出现数据丢失。 隔离性是指事务提交前的中间状态对其他事务不可见，即相互..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.nlark.com/yuque/0/2024/png/12651402/1710829070500-a961c121-3f86-4d34-a017-1b3c53e5f7df.png#averageHue=%23f4f4f4&clientId=u0415d217-3cb3-4&from=paste&height=680&id=u217b9fe6&originHeight=680&originWidth=896&originalType=binary&ratio=1&rotation=0&showTitle=false&size=138407&status=done&style=none&taskId=ud351da9c-0c05-4456-aa34-4236741299a&title=&width=896"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事务四大特性\\",\\"image\\":[\\"https://cdn.nlark.com/yuque/0/2024/png/12651402/1710829070500-a961c121-3f86-4d34-a017-1b3c53e5f7df.png#averageHue=%23f4f4f4&clientId=u0415d217-3cb3-4&from=paste&height=680&id=u217b9fe6&originHeight=680&originWidth=896&originalType=binary&ratio=1&rotation=0&showTitle=false&size=138407&status=done&style=none&taskId=ud351da9c-0c05-4456-aa34-4236741299a&title=&width=896\\",\\"https://cdn.nlark.com/yuque/0/2024/png/12651402/1710829097732-66d4972b-d1aa-4836-a107-fb5af1a44b5f.png#averageHue=%23c4d8c1&clientId=u0415d217-3cb3-4&from=paste&height=966&id=u1a3bab53&originHeight=966&originWidth=1004&originalType=binary&ratio=1&rotation=0&showTitle=false&size=264123&status=done&style=none&taskId=u0dbcf09b-db53-4dee-b029-ea645666836&title=&width=1004\\",\\"https://cdn.nlark.com/yuque/0/2024/png/12651402/1710829112236-d69dce66-301c-470b-b912-6bcdb0c267d0.png#averageHue=%23c6dbc3&clientId=u0415d217-3cb3-4&from=paste&height=929&id=u79e664e9&originHeight=929&originWidth=1500&originalType=binary&ratio=1&rotation=0&showTitle=false&size=377553&status=done&style=none&taskId=ue07b6b39-c90a-4858-bc4a-bbb7f404faf&title=&width=1500\\",\\"https://cdn.nlark.com/yuque/0/2024/png/12651402/1710829136244-cdf7e59b-dd75-4955-ab3f-5a7fcc9cec88.png#averageHue=%23f4f4f4&clientId=u0415d217-3cb3-4&from=paste&height=684&id=ubc6005d1&originHeight=684&originWidth=1326&originalType=binary&ratio=1&rotation=0&showTitle=false&size=192971&status=done&style=none&taskId=uaf7668c5-88e2-40ee-b65b-cc2df1e1a59&title=&width=1326\\",\\"https://cdn.nlark.com/yuque/0/2023/png/12651402/1686487103636-474ddadf-21cd-4a5c-85b3-4ebae0c82e35.png#averageHue=%23eaeaea&clientId=u475ec09f-2153-4&from=paste&height=2492&id=u07f4eabc&originHeight=2492&originWidth=2780&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1248218&status=done&style=none&taskId=u167dd146-b556-4a6c-8a27-bdec3ff74d5&title=&width=2780\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"原子性","slug":"原子性","link":"#原子性","children":[{"level":3,"title":"本文知识点总结：","slug":"本文知识点总结","link":"#本文知识点总结","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.85,"words":1456},"filePathRelative":"mysql/transaction.md","autoDesc":true}');export{g as comp,m as data};
